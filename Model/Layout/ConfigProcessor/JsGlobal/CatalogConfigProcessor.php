<?php
/**
 * Copyright (c) 2024 Hawksearch (www.hawksearch.com) - All Rights Reserved
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
declare(strict_types=1);

namespace HawkSearch\EsIndexing\Model\Layout\ConfigProcessor\JsGlobal;

use HawkSearch\EsIndexing\Model\Config\AdvancedCategory as AdvancedCategoryConfig;
use HawkSearch\EsIndexing\Model\Layout\LayoutConfigProcessorInterface;
use HawkSearch\EsIndexing\Registry\CurrentCategory;
use Magento\Catalog\Api\Data\CategoryInterface;
use Magento\Catalog\Model\Category;
use Magento\CatalogUrlRewrite\Model\CategoryUrlPathGenerator;
use Magento\CatalogUrlRewrite\Model\Storage\DbStorage;
use Magento\Framework\App\Config\ScopeConfigInterface;

/**
 * Render category related Javascript configurations
 */
class CatalogConfigProcessor implements LayoutConfigProcessorInterface
{
    /**
     * @var CurrentCategory
     */
    private CurrentCategory $currentCategory;

    /**
     * @var CategoryUrlPathGenerator
     */
    private CategoryUrlPathGenerator $categoryUrlPathGenerator;

    /**
     * @var ScopeConfigInterface
     */
    private ScopeConfigInterface $scopeConfig;

    /**
     * @var DbStorage
     */
    private DbStorage $urlFinder;

    /**
     * @var AdvancedCategoryConfig
     */
    private AdvancedCategoryConfig $advancedCategoryConfig;

    /**
     * @param CurrentCategory $currentCategory
     * @param CategoryUrlPathGenerator $categoryUrlPathGenerator
     * @param ScopeConfigInterface $scopeConfig
     * @param DbStorage $urlFinder
     */
    public function __construct(
        CurrentCategory $currentCategory,
        CategoryUrlPathGenerator $categoryUrlPathGenerator,
        ScopeConfigInterface $scopeConfig,
        DbStorage $urlFinder,
        AdvancedCategoryConfig $advancedCategoryConfig
    )
    {
        $this->currentCategory = $currentCategory;
        $this->categoryUrlPathGenerator = $categoryUrlPathGenerator;
        $this->scopeConfig = $scopeConfig;
        $this->urlFinder = $urlFinder;
        $this->advancedCategoryConfig = $advancedCategoryConfig;
    }

    /**
     * Process configurations
     * Uses format supported by mage/utils/template templates syntax
     *
     * @inheritDoc
     */
    public function process($jsConfig)
    {
        $urlRewritesConfig = $this->getUrlRewritesConfig();
        $config = [
            'catalog' => [
                'isCategoryPage' => $this->isCategoryPage(),
                'useCategoryPathInProductUrl' => $urlRewritesConfig && $this->scopeConfig->isSetFlag(
                    \Magento\Catalog\Helper\Product::XML_PATH_PRODUCT_URL_USE_CATEGORY,
                    \Magento\Store\Model\ScopeInterface::SCOPE_STORE
                ),
                'productUrlTemplate' => $this->getProductUrlTemplate(),
                'categoryProducts' => $urlRewritesConfig
            ]
        ];

        return array_merge_recursive($jsConfig ?? [], $config);
    }

    /**
     * @return bool
     */
    private function isCategoryPage(): bool
    {
        $category = $this->getCurrentCategory();
        if (!$category || !$category->getId()) {
            return false;
        }

        $isContentMode = $category->getDisplayMode() === Category::DM_PAGE;
        if ($isContentMode) {
            return false;
        }

        return true;
    }

    /**
     * @return CategoryInterface
     */
    private function getCurrentCategory(): CategoryInterface
    {
        return $this->currentCategory->get();
    }

    /**
     * @return string
     */
    private function getProductUrlTemplate(): string
    {
        return $this->categoryUrlPathGenerator->getUrlPath($this->getCurrentCategory()) . '/' . '${ $.product_url_slug }';
    }

    /**
     * @return array
     */
    private function getUrlRewritesConfig(): array
    {
        $category = $this->getCurrentCategory();
        if (!$category->getId() || !$this->useCategoryPathInProductUrl()) {
            return [];
        }

        $categoryProductIds = array_keys($category->getProductCollection()->getItems());
        $filter = [
            'entity_type' => 'product',
            'entity_id' => $categoryProductIds,
            'store_id' => $category->getStoreId(),
            'is_autogenerated' => 1
        ];
        $filter['metadata']['category_id'] = $category->getId();

        $rewrites = $this->urlFinder->findAllByData($filter);

        $urlRewriteExceptions = [];
        $allRewrites = [];
        foreach ($rewrites as $rewrite) {
            if (strpos($rewrite->getRequestPath(), $this->getCategoryUrlPath()) !== 0) {
                $urlRewriteExceptions[$rewrite->getEntityId()] = $rewrite->getRequestPath();
            }
            $allRewrites[$rewrite->getEntityId()] = $rewrite->getRequestPath();
        }
        $noUrlRewriteProducts = array_diff($categoryProductIds, array_keys($allRewrites));

        if (count($urlRewriteExceptions) > $this->advancedCategoryConfig->getProductUrlRewriteExceptionsThreshold()) {
            return [];
        }

        return [
            'productUrlRewriteExceptions' => $urlRewriteExceptions,
            'noUrlRewriteProducts' => $noUrlRewriteProducts
        ];
    }

    /**
     * @return string
     */
    private function getCategoryUrlPath(): string
    {
        return $this->categoryUrlPathGenerator->getUrlPath($this->getCurrentCategory()) . '/';
    }

    /**
     * @return bool
     */
    private function useCategoryPathInProductUrl(): bool
    {
        return $this->scopeConfig->isSetFlag(
            \Magento\Catalog\Helper\Product::XML_PATH_PRODUCT_URL_USE_CATEGORY,
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );
    }
}
